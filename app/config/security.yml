jms_security_extra:
    secure_all_services: false
    expressions: true

security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        FOS\UserBundle\Model\UserInterface: sha512

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
#        ROLE_ADMIN:       ROLE_USER
#        ROLE_SUPER_ADMIN: ROLE_ADMIN

    providers:
        fos_userbundle:
            id: fos_user.user_provider.username
        in_memory:
            memory:
                users:
                    admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }

    firewalls:
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

        admin_secured_area:
            pattern: ^/admin/
            anonymous: true
            logout:
                path: linkzone_core_admin_logout
                target: linkzone_core_admin_login
            form_login:
                provider: in_memory
                csrf_provider: form.csrf_provider
                login_path: linkzone_core_admin_login
                check_path: linkzone_core_admin_login_check
                default_target_path: linkzone_core_admin_home
                always_use_default_target_path: true

        secured_area:
            # any route, not starting with /admin
            # this will save us from 'firewall overlapping', when
            # after authenticating against admin_secured_area
            # we are prompted to authenticate against secured_area, too
            # http://stackoverflow.com/questions/406230/regular-expression-to-match-string-not-containing-a-word
            pattern: ^((?!\/admin).*)$
            anonymous: true
            logout: true
            form_login:
                provider: fos_userbundle
                csrf_provider: form.csrf_provider
                login_path: /login
                check_path: /login_check
                default_target_path: /profile
                always_use_default_target_path: true

    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        #
        # You must uncomment the two following rules to restrict access to paths
        # starting with the /_internal prefix to only localhost
        #- { path: ^/_internal/secure, roles: IS_AUTHENTICATED_ANONYMOUSLY, ip: 127.0.0.1 }
        #- { path: ^/_internal/secure, roles: ROLE_NO_ACCESS }
        - { path: ^/css/, role: IS_AUTHENTICATED_ANONYMOUSLY }

        - { path: ^/admin/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/.*, role: ROLE_ADMIN }

        - { path: ^/login,    role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/partials/default/login.html,    role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, role: ROLE_USER }
