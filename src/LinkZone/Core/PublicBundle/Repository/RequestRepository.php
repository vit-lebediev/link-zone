<?php

namespace LinkZone\Core\PublicBundle\Repository;

use LinkZone\Core\PublicBundle\Entity\Request;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use Doctrine\Common\Collections\ArrayCollection;

use FOS\UserBundle\Model\UserInterface;

/**
 * PlatformRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RequestRepository extends EntityRepository
{
    public function findAllReceivedForExchangeForUser(UserInterface $user)
    {
        return new ArrayCollection($this->findBy(
                array(
                    'receiverUser' => $user,
                    'status'       => Request::STATUS_EXCHANGE,
                ),
                array('created' => "DESC")
        ));
    }

    public function findAllSentForExchangeForUser(UserInterface $user)
    {
        return new ArrayCollection($this->findBy(
                array(
                    'senderUser' => $user,
                    'status'     => Request::STATUS_EXCHANGE,
                ),
                array('created' => "DESC")
        ));
    }

    public function findAllInProgressForUser(UserInterface $user)
    {
        $qb = $this->createQueryBuilder("request");
        $qb->where($qb->expr()->andx(
                $qb->expr()->orx(
                        $qb->expr()->eq("request.receiverUser", ":user"),
                        $qb->expr()->eq("request.senderUser", ":user")
                ),
                $qb->expr()->eq("request.status", ":status")
        ));

        $qb->setParameter(":status", Request::STATUS_IN_PROGRESS);
        $qb->setParameter(":user", $user);

        $qb->orderBy("request.created", "DESC");

        return new ArrayCollection($qb->getQuery()->getResult());
    }

    public function findAllFinishedForUser(UserInterface $user)
    {
        $qb = $this->createQueryBuilder("request");
        $qb->where($qb->expr()->andx(
                $qb->expr()->orx(
                        $qb->expr()->eq("request.receiverUser", ":user"),
                        $qb->expr()->eq("request.senderUser", ":user")
                ),
                $qb->expr()->eq("request.status", ":status")
        ));

        $qb->setParameter(":status", Request::STATUS_FINISHED);
        $qb->setParameter(":user", $user);

        $qb->orderBy("request.created", "DESC");

        return new ArrayCollection($qb->getQuery()->getResult());
    }
}
